{"version":3,"sources":["../../test/Perceptron.test.js"],"names":["testCase","require","Perceptron","Activation","module","exports","test","perceptron","heaviside","equal","inputs","done","throws","weights","feedForward","or","and","not","XOR","rAND","rOR"],"mappings":"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","file":"Perceptron.test.js","sourcesContent":["'use strict';\n\nlet testCase  = require('nodeunit').testCase;\n\nlet Perceptron = require(\"../src/Perceptron\");\nlet Activation = require(\"../src/Activation\");\n\nmodule.exports = testCase({\n    'Perceptron - Instantiation': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2, Activation.heaviside);\n\n        test.equal(perceptron.inputs, 2);\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter activation': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(2, null);\n        });\n\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter inputs': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(0, Activation.heaviside);\n        });\n        test.done();\n    },\n    'Perceptron - OR logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2, Activation.heaviside);\n\n        perceptron.weights = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 0]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - AND logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2, Activation.heaviside);\n\n        perceptron.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 0);\n        test.equal(perceptron.feedForward([1, 0]), 0);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(1, Activation.heaviside);\n\n        perceptron.weights = [-2, 1]; // 1 input, 1 bias\n\n        test.equal(perceptron.feedForward([0]), 1);\n        test.equal(perceptron.feedForward([1]), 0);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate for XOR': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2, Activation.heaviside);\n\n        perceptron.weights = [-2, 1, -0.1]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 0);\n\n        test.done();\n    },\n    'Perceptron - XOR logic gate using 3 perceptrons': function (test) {\n        // Instantiation\n        let or  = new Perceptron(2, Activation.heaviside);\n        let and = new Perceptron(2, Activation.heaviside);\n        let not = new Perceptron(2, Activation.heaviside);\n\n        or.weights  = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n        and.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n        not.weights = [ -2,   1, -0.1]; // 2 inputs, 1 bias\n\n        // Create the XOR function\n        let XOR = function(inputs) {\n\n            let rAND = and.feedForward(inputs);\n            let rOR  =  or.feedForward(inputs);\n\n            return not.feedForward([rAND, rOR]);\n        };\n\n        test.equal(XOR([0, 0]), 0);\n        test.equal(XOR([0, 1]), 1);\n        test.equal(XOR([1, 0]), 1);\n        test.equal(XOR([1, 1]), 0);\n\n        test.done();\n    }\n});"]}