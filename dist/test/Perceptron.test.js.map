{"version":3,"sources":["../../test/Perceptron.test.js"],"names":["testCase","require","Perceptron","Activation","module","exports","test","perceptron","weights","equal","inputs","length","deepEqual","done","throws","feedForward","or","and","not","XOR","rAND","rOR"],"mappings":"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","file":"Perceptron.test.js","sourcesContent":["'use strict';\n\nlet testCase  = require('nodeunit').testCase;\n\nlet Perceptron = require(\"../src/Perceptron\");\nlet Activation = require(\"../src/Activation\");\n\nmodule.exports = testCase({\n    'Perceptron - Instantiation': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        let weights = [0.2, 0.3, 0.4];\n\n        perceptron.weights = weights;\n\n        test.equal(perceptron.inputs, 2);\n\n        test.equal(perceptron.weights.length, 3);\n        test.deepEqual(perceptron.weights, weights);\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter inputs': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(0);\n        });\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter activation': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(2, null);\n        });\n\n        test.done();\n    },\n    'Perceptron - OR logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 0]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - AND logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 0);\n        test.equal(perceptron.feedForward([1, 0]), 0);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(1);\n\n        perceptron.weights = [-2, 1]; // 1 input, 1 bias\n\n        test.equal(perceptron.feedForward([0]), 1);\n        test.equal(perceptron.feedForward([1]), 0);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate for XOR': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [-2, 1, -0.1]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 0);\n\n        test.done();\n    },\n    'Perceptron - XOR logic gate using 3 perceptrons': function (test) {\n        // Instantiation\n        let or  = new Perceptron(2);\n        let and = new Perceptron(2);\n        let not = new Perceptron(2);\n\n        or.weights  = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n        and.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n        not.weights = [ -2,   1, -0.1]; // 2 inputs, 1 bias\n\n        // Create the XOR function\n        let XOR = function(inputs) {\n\n            let rAND = and.feedForward(inputs);\n            let rOR  =  or.feedForward(inputs);\n\n            return not.feedForward([rAND, rOR]);\n        };\n\n        test.equal(XOR([0, 0]), 0);\n        test.equal(XOR([0, 1]), 1);\n        test.equal(XOR([1, 0]), 1);\n        test.equal(XOR([1, 1]), 0);\n\n        test.done();\n    }\n});"]}