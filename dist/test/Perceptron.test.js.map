{"version":3,"sources":["../../test/Perceptron.test.js"],"names":["testCase","require","Perceptron","Activation","module","exports","test","perceptron","equal","inputs","done","throws","weights","feedForward","or","and","not","XOR","rAND","rOR"],"mappings":"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","file":"Perceptron.test.js","sourcesContent":["'use strict';\n\nlet testCase  = require('nodeunit').testCase;\n\nlet Perceptron = require(\"../src/Perceptron\");\nlet Activation = require(\"../src/Activation\");\n\nmodule.exports = testCase({\n    'Perceptron - Instantiation': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        test.equal(perceptron.inputs, 2);\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter inputs': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(0);\n        });\n        test.done();\n    },\n    'Perceptron - Instantiation wrong parameter activation': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Perceptron(2, null);\n        });\n\n        test.done();\n    },\n    'Perceptron - OR logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 0]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - AND logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 0);\n        test.equal(perceptron.feedForward([1, 0]), 0);\n        test.equal(perceptron.feedForward([1, 1]), 1);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(1);\n\n        perceptron.weights = [-2, 1]; // 1 input, 1 bias\n\n        test.equal(perceptron.feedForward([0]), 1);\n        test.equal(perceptron.feedForward([1]), 0);\n\n        test.done();\n    },\n    'Perceptron - NOT logic gate for XOR': function (test) {\n        // Instantiation\n        let perceptron = new Perceptron(2);\n\n        perceptron.weights = [-2, 1, -0.1]; // 2 inputs, 1 bias\n\n        test.equal(perceptron.feedForward([0, 0]), 0);\n        test.equal(perceptron.feedForward([0, 1]), 1);\n        test.equal(perceptron.feedForward([1, 1]), 0);\n\n        test.done();\n    },\n    'Perceptron - XOR logic gate using 3 perceptrons': function (test) {\n        // Instantiation\n        let or  = new Perceptron(2);\n        let and = new Perceptron(2);\n        let not = new Perceptron(2);\n\n        or.weights  = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n        and.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n        not.weights = [ -2,   1, -0.1]; // 2 inputs, 1 bias\n\n        // Create the XOR function\n        let XOR = function(inputs) {\n\n            let rAND = and.feedForward(inputs);\n            let rOR  =  or.feedForward(inputs);\n\n            return not.feedForward([rAND, rOR]);\n        };\n\n        test.equal(XOR([0, 0]), 0);\n        test.equal(XOR([0, 1]), 1);\n        test.equal(XOR([1, 0]), 1);\n        test.equal(XOR([1, 1]), 0);\n\n        test.done();\n    }\n});"]}