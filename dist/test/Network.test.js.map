{"version":3,"sources":["../../test/Network.test.js"],"names":["testCase","require","Network","module","exports","test","network","weights","equal","inputs","outputs","length","deepEqual","feedForward","done","Array","fill","layers","throws","xor"],"mappings":"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","file":"Network.test.js","sourcesContent":["'use strict';\n\nlet testCase  = require('nodeunit').testCase;\n\nlet Network = require(\"../src/Network\");\n\nmodule.exports = testCase({\n    'Network - Instantiation one layer': function (test) {\n        // Instantiation\n        let network = new Network([2, 1]);\n\n        let weights = [0.2, 0.3, 0.4];\n\n        network.weights = weights;\n\n        test.equal(network.inputs,  2);\n        test.equal(network.outputs, 1);\n\n        test.equal(network.weights.length, 3);\n        test.deepEqual(network.weights, weights);\n\n        test.equal(network.feedForward([1, 1]).length, 1);\n\n        test.done();\n    },\n    'Network - Instantiation of a Network of 4 layers': function (test) {\n        // Instantiation\n        let network = new Network([3, 5, 3, 3, 2]);\n\n        let weights = new Array(58).fill(0.25);\n\n        network.weights = weights;\n\n        test.equal(network.inputs,  3);\n        test.equal(network.layers,  4);\n        test.equal(network.outputs, 2);\n\n        test.equal(network.weights.length, 58);\n        test.deepEqual(network.weights, weights);\n\n        test.equal(network.feedForward(new Array(3).fill(1)).length, 2);\n\n        test.done();\n    },\n    'Network - Instantiation wrong parameter layers': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Network(null);\n        });\n        test.done();\n    },\n    'Network - Instantiation wrong parameter size layers': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Network([1]);\n        });\n        test.done();\n    },\n    'Network - Instantiation wrong parameter activation': function (test) {\n        // Instantiation\n        test.throws(function() {\n            new Network([2, 1], null);\n        });\n        test.done();\n    },\n    'Network - OR logic gate': function (test) {\n        // Instantiation\n        let network = new Network([2, 1]);\n\n        network.weights = [0.5, 0.5, -0.5]; // 2 inputs, 1 bias\n\n        test.deepEqual(network.feedForward([0, 0]), [0]);\n        test.deepEqual(network.feedForward([0, 1]), [1]);\n        test.deepEqual(network.feedForward([1, 0]), [1]);\n        test.deepEqual(network.feedForward([1, 1]), [1]);\n\n        test.done();\n    },\n    'Network - AND logic gate': function (test) {\n        // Instantiation\n        let network = new Network([2, 1]);\n\n        network.weights = [0.3, 0.3, -0.5]; // 2 inputs, 1 bias\n\n        test.deepEqual(network.feedForward([0, 0]), [0]);\n        test.deepEqual(network.feedForward([0, 1]), [0]);\n        test.deepEqual(network.feedForward([1, 0]), [0]);\n        test.deepEqual(network.feedForward([1, 1]), [1]);\n\n        test.done();\n    },\n    'Network - NOT logic gate': function (test) {\n        // Instantiation\n        let network = new Network([1, 1]);\n\n        network.weights = [-2, 1]; // 1 input, 1 bias\n\n        test.deepEqual(network.feedForward([0]), [1]);\n        test.deepEqual(network.feedForward([1]), [0]);\n\n        test.done();\n    },\n    'Network - NOT logic gate for XOR': function (test) {\n        // Instantiation\n        let network = new Network([2, 1]);\n\n        network.weights = [-2, 1, -0.1]; // 2 inputs, 1 bias\n\n        test.deepEqual(network.feedForward([0, 0]), [0]);\n        test.deepEqual(network.feedForward([0, 1]), [1]);\n        test.deepEqual(network.feedForward([1, 1]), [0]);\n\n        test.done();\n    },\n    'Network - XOR logic gate using a network of 2 layers': function (test) {\n        // Instantiation\n        let xor  = new Network([2, 2, 1]);\n\n        xor.weights  = [0.3, 0.3, -0.5, 0.5, 0.5, -0.5, -2, 1, -0.1];\n\n        test.deepEqual(xor.feedForward([0, 0]), [0]);\n        test.deepEqual(xor.feedForward([0, 1]), [1]);\n        test.deepEqual(xor.feedForward([1, 0]), [1]);\n        test.deepEqual(xor.feedForward([1, 1]), [0]);\n\n        test.done();\n    }\n});"]}